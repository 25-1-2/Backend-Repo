name: "LANDR API CI/CD"
on:
  push:
    branches: [ main, feat/1, feat/2 ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Create environment variable file
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "환경 변수 파일 (.env) 생성됨"
      - name: Load environment variables from .env file
        run: |
          if [ -f .env ]; then
            while IFS= read -r line; do
              if [[ $line != \#* ]] && [[ $line == *"="* ]]; then
                echo "$line" >> $GITHUB_ENV
              fi
            done < .env
            echo ".env 파일에서 환경 변수 로드 완료"
          else
            echo ".env 파일을 찾을 수 없습니다!"
          fi
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test -Dfile.encoding=UTF-8
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: Build Docker image
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest .
      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          debug: true
          script: |
            # 환경 파일 생성
            echo "${{ secrets.ENV_FILE }}" > .env
            
            # 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
            
            # 기존 컨테이너가 있다면 중지 및 제거
            if [ "$(docker ps -q -f name=spring-app)" ]; then
              echo "기존 컨테이너 중지 및 제거 중..."
              docker stop spring-app
              docker rm spring-app
            else
              echo "실행 중인 컨테이너를 찾을 수 없습니다."
            fi
            
            # 새 컨테이너 실행
            docker run -d \
              --name spring-app \
              --restart unless-stopped \
              -p ${{ secrets.SERVER_PORT }}:${{ secrets.SERVER_PORT }} \
              --env-file .env \
              ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
            
            # 컨테이너 상태 확인
            docker ps -a | grep spring-app
